// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VirtoCommerce.CartModule.Data.Repositories;

namespace VirtoCommerce.CartModule.Data.Migrations
{
    [DbContext(typeof(CartDbContext))]
    [Migration("20210910193523_AddAddressOuterId")]
    partial class AddAddressOuterId
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("VirtoCommerce.CartModule.Data.Model.AddressEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("AddressType")
                        .HasColumnType("nvarchar(32)")
                        .HasMaxLength(32);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(3)")
                        .HasMaxLength(3);

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(254)")
                        .HasMaxLength(254);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("Line1")
                        .HasColumnType("nvarchar(2048)")
                        .HasMaxLength(2048);

                    b.Property<string>("Line2")
                        .HasColumnType("nvarchar(2048)")
                        .HasMaxLength(2048);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(2048)")
                        .HasMaxLength(2048);

                    b.Property<string>("Organization")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("OuterId")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("PaymentId")
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("RegionId")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("RegionName")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ShipmentId")
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ShoppingCartId")
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId");

                    b.HasIndex("ShipmentId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("CartAddress");
                });

            modelBuilder.Entity("VirtoCommerce.CartModule.Data.Model.CartDynamicPropertyObjectValueEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<bool?>("BooleanValue")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTimeValue")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("DecimalValue")
                        .HasColumnType("decimal(18,5)");

                    b.Property<string>("DictionaryItemId")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<int?>("IntegerValue")
                        .HasColumnType("int");

                    b.Property<string>("LineItemId")
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Locale")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("LongTextValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ObjectId")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ObjectType")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PaymentId")
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PropertyId")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("PropertyName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("ShipmentId")
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ShoppingCartId")
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ShortTextValue")
                        .HasColumnType("nvarchar(512)")
                        .HasMaxLength(512);

                    b.Property<string>("ValueType")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("LineItemId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("ShipmentId");

                    b.HasIndex("ShoppingCartId");

                    b.HasIndex("ObjectType", "LineItemId")
                        .HasName("IX_ObjectType_LineItemId");

                    b.HasIndex("ObjectType", "ObjectId")
                        .HasName("IX_ObjectType_ObjectId");

                    b.HasIndex("ObjectType", "PaymentId")
                        .HasName("IX_ObjectType_PaymentId");

                    b.HasIndex("ObjectType", "ShipmentId")
                        .HasName("IX_ObjectType_ShipmentId");

                    b.HasIndex("ObjectType", "ShoppingCartId")
                        .HasName("IX_ObjectType_ShoppingCartId");

                    b.ToTable("CartDynamicPropertyObjectValue");
                });

            modelBuilder.Entity("VirtoCommerce.CartModule.Data.Model.CouponEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("ShoppingCartId")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("CartCoupon");
                });

            modelBuilder.Entity("VirtoCommerce.CartModule.Data.Model.DiscountEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("CouponCode")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(3)")
                        .HasMaxLength(3);

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("Money");

                    b.Property<decimal>("DiscountAmountWithTax")
                        .HasColumnType("Money");

                    b.Property<string>("LineItemId")
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PaymentId")
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PromotionDescription")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("PromotionId")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("ShipmentId")
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ShoppingCartId")
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("LineItemId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("ShipmentId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("CartDiscount");
                });

            modelBuilder.Entity("VirtoCommerce.CartModule.Data.Model.LineItemEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("CatalogId")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(2048)")
                        .HasMaxLength(2048);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(3)")
                        .HasMaxLength(3);

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("Money");

                    b.Property<decimal>("DiscountAmountWithTax")
                        .HasColumnType("Money");

                    b.Property<decimal>("Fee")
                        .HasColumnType("Money");

                    b.Property<decimal>("FeeWithTax")
                        .HasColumnType("Money");

                    b.Property<string>("FulfillmentCenterId")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("FulfillmentCenterName")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("FulfillmentLocationCode")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<decimal?>("Height")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(1028)")
                        .HasMaxLength(1028);

                    b.Property<bool>("IsGift")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReccuring")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRejected")
                        .HasColumnType("bit");

                    b.Property<string>("LanguageCode")
                        .HasColumnType("nvarchar(16)")
                        .HasMaxLength(16);

                    b.Property<decimal?>("Length")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ListPrice")
                        .HasColumnType("Money");

                    b.Property<decimal>("ListPriceWithTax")
                        .HasColumnType("Money");

                    b.Property<string>("MeasureUnit")
                        .HasColumnType("nvarchar(32)")
                        .HasMaxLength(32);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PriceId")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("ProductType")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<bool>("RequiredShipping")
                        .HasColumnType("bit");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("Money");

                    b.Property<decimal>("SalePriceWithTax")
                        .HasColumnType("Money");

                    b.Property<string>("ShipmentMethodCode")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("ShoppingCartId")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<bool>("TaxIncluded")
                        .HasColumnType("bit");

                    b.Property<decimal>("TaxPercentRate")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("TaxTotal")
                        .HasColumnType("Money");

                    b.Property<string>("TaxType")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("ValidationType")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<decimal?>("VolumetricWeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("WeightUnit")
                        .HasColumnType("nvarchar(32)")
                        .HasMaxLength(32);

                    b.Property<decimal?>("Width")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("CartLineItem");
                });

            modelBuilder.Entity("VirtoCommerce.CartModule.Data.Model.PaymentEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<decimal>("Amount")
                        .HasColumnType("Money");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("Money");

                    b.Property<decimal>("DiscountAmountWithTax")
                        .HasColumnType("Money");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OuterId")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("PaymentGatewayCode")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<decimal>("Price")
                        .HasColumnType("Money");

                    b.Property<decimal>("PriceWithTax")
                        .HasColumnType("Money");

                    b.Property<string>("Purpose")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("ShoppingCartId")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)");

                    b.Property<decimal>("TaxPercentRate")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("TaxTotal")
                        .HasColumnType("Money");

                    b.Property<string>("TaxType")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<decimal>("Total")
                        .HasColumnType("Money");

                    b.Property<decimal>("TotalWithTax")
                        .HasColumnType("Money");

                    b.HasKey("Id");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("CartPayment");
                });

            modelBuilder.Entity("VirtoCommerce.CartModule.Data.Model.ShipmentEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(3)")
                        .HasMaxLength(3);

                    b.Property<decimal?>("DimensionHeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DimensionLength")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DimensionUnit")
                        .HasColumnType("nvarchar(16)")
                        .HasMaxLength(16);

                    b.Property<decimal?>("DimensionWidth")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("Money");

                    b.Property<decimal>("DiscountAmountWithTax")
                        .HasColumnType("Money");

                    b.Property<decimal>("Fee")
                        .HasColumnType("Money");

                    b.Property<decimal>("FeeWithTax")
                        .HasColumnType("Money");

                    b.Property<string>("FulfillmentCenterId")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("FulfillmentCenterName")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("Money");

                    b.Property<decimal>("PriceWithTax")
                        .HasColumnType("Money");

                    b.Property<string>("ShipmentMethodCode")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("ShipmentMethodOption")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("ShoppingCartId")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("TaxIncluded")
                        .HasColumnType("bit");

                    b.Property<decimal>("TaxPercentRate")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("TaxTotal")
                        .HasColumnType("Money");

                    b.Property<string>("TaxType")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<decimal>("Total")
                        .HasColumnType("Money");

                    b.Property<decimal>("TotalWithTax")
                        .HasColumnType("Money");

                    b.Property<decimal?>("VolumetricWeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("WeightUnit")
                        .HasColumnType("nvarchar(16)")
                        .HasMaxLength(16);

                    b.Property<decimal?>("WeightValue")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("CartShipment");
                });

            modelBuilder.Entity("VirtoCommerce.CartModule.Data.Model.ShipmentItemEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("BarCode")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LineItemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("ShipmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("LineItemId");

                    b.HasIndex("ShipmentId");

                    b.ToTable("CartShipmentItem");
                });

            modelBuilder.Entity("VirtoCommerce.CartModule.Data.Model.ShoppingCartEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ChannelId")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(2048)")
                        .HasMaxLength(2048);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(3)")
                        .HasMaxLength(3);

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("Money");

                    b.Property<decimal>("DiscountTotal")
                        .HasColumnType("Money");

                    b.Property<decimal>("DiscountTotalWithTax")
                        .HasColumnType("Money");

                    b.Property<decimal>("Fee")
                        .HasColumnType("Money");

                    b.Property<decimal>("FeeWithTax")
                        .HasColumnType("Money");

                    b.Property<decimal>("HandlingTotal")
                        .HasColumnType("Money");

                    b.Property<decimal>("HandlingTotalWithTax")
                        .HasColumnType("Money");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRecuring")
                        .HasColumnType("bit");

                    b.Property<string>("LanguageCode")
                        .HasColumnType("nvarchar(16)")
                        .HasMaxLength(16);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<decimal>("PaymentTotal")
                        .HasColumnType("Money");

                    b.Property<decimal>("PaymentTotalWithTax")
                        .HasColumnType("Money");

                    b.Property<string>("PurchaseOrderNumber")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<decimal>("ShippingTotal")
                        .HasColumnType("Money");

                    b.Property<decimal>("ShippingTotalWithTax")
                        .HasColumnType("Money");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("StoreId")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("Money");

                    b.Property<decimal>("SubTotalWithTax")
                        .HasColumnType("Money");

                    b.Property<bool>("TaxIncluded")
                        .HasColumnType("bit");

                    b.Property<decimal>("TaxPercentRate")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("TaxTotal")
                        .HasColumnType("Money");

                    b.Property<decimal>("Total")
                        .HasColumnType("Money");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("ValidationType")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("CustomerId", "StoreId", "ModifiedDate")
                        .HasName("IX_CustomerId_StoreId_Date");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("VirtoCommerce.CartModule.Data.Model.TaxDetailEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<decimal>("Amount")
                        .HasColumnType("Money");

                    b.Property<string>("LineItemId")
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("PaymentId")
                        .HasColumnType("nvarchar(128)");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ShipmentId")
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ShoppingCartId")
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("LineItemId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("ShipmentId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("CartTaxDetail");
                });

            modelBuilder.Entity("VirtoCommerce.CartModule.Data.Model.AddressEntity", b =>
                {
                    b.HasOne("VirtoCommerce.CartModule.Data.Model.PaymentEntity", "Payment")
                        .WithMany("Addresses")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("VirtoCommerce.CartModule.Data.Model.ShipmentEntity", "Shipment")
                        .WithMany("Addresses")
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("VirtoCommerce.CartModule.Data.Model.ShoppingCartEntity", "ShoppingCart")
                        .WithMany("Addresses")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.ClientCascade);
                });

            modelBuilder.Entity("VirtoCommerce.CartModule.Data.Model.CartDynamicPropertyObjectValueEntity", b =>
                {
                    b.HasOne("VirtoCommerce.CartModule.Data.Model.LineItemEntity", "LineItem")
                        .WithMany("DynamicPropertyObjectValues")
                        .HasForeignKey("LineItemId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("VirtoCommerce.CartModule.Data.Model.PaymentEntity", "Payment")
                        .WithMany("DynamicPropertyObjectValues")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("VirtoCommerce.CartModule.Data.Model.ShipmentEntity", "Shipment")
                        .WithMany("DynamicPropertyObjectValues")
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("VirtoCommerce.CartModule.Data.Model.ShoppingCartEntity", "ShoppingCart")
                        .WithMany("DynamicPropertyObjectValues")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.ClientCascade);
                });

            modelBuilder.Entity("VirtoCommerce.CartModule.Data.Model.CouponEntity", b =>
                {
                    b.HasOne("VirtoCommerce.CartModule.Data.Model.ShoppingCartEntity", "ShoppingCart")
                        .WithMany("Coupons")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VirtoCommerce.CartModule.Data.Model.DiscountEntity", b =>
                {
                    b.HasOne("VirtoCommerce.CartModule.Data.Model.LineItemEntity", "LineItem")
                        .WithMany("Discounts")
                        .HasForeignKey("LineItemId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("VirtoCommerce.CartModule.Data.Model.PaymentEntity", "Payment")
                        .WithMany("Discounts")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("VirtoCommerce.CartModule.Data.Model.ShipmentEntity", "Shipment")
                        .WithMany("Discounts")
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("VirtoCommerce.CartModule.Data.Model.ShoppingCartEntity", "ShoppingCart")
                        .WithMany("Discounts")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.ClientCascade);
                });

            modelBuilder.Entity("VirtoCommerce.CartModule.Data.Model.LineItemEntity", b =>
                {
                    b.HasOne("VirtoCommerce.CartModule.Data.Model.ShoppingCartEntity", "ShoppingCart")
                        .WithMany("Items")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VirtoCommerce.CartModule.Data.Model.PaymentEntity", b =>
                {
                    b.HasOne("VirtoCommerce.CartModule.Data.Model.ShoppingCartEntity", "ShoppingCart")
                        .WithMany("Payments")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VirtoCommerce.CartModule.Data.Model.ShipmentEntity", b =>
                {
                    b.HasOne("VirtoCommerce.CartModule.Data.Model.ShoppingCartEntity", "ShoppingCart")
                        .WithMany("Shipments")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VirtoCommerce.CartModule.Data.Model.ShipmentItemEntity", b =>
                {
                    b.HasOne("VirtoCommerce.CartModule.Data.Model.LineItemEntity", "LineItem")
                        .WithMany("ShipmentItems")
                        .HasForeignKey("LineItemId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("VirtoCommerce.CartModule.Data.Model.ShipmentEntity", "Shipment")
                        .WithMany("Items")
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VirtoCommerce.CartModule.Data.Model.TaxDetailEntity", b =>
                {
                    b.HasOne("VirtoCommerce.CartModule.Data.Model.LineItemEntity", "LineItem")
                        .WithMany("TaxDetails")
                        .HasForeignKey("LineItemId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("VirtoCommerce.CartModule.Data.Model.PaymentEntity", "Payment")
                        .WithMany("TaxDetails")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("VirtoCommerce.CartModule.Data.Model.ShipmentEntity", "Shipment")
                        .WithMany("TaxDetails")
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("VirtoCommerce.CartModule.Data.Model.ShoppingCartEntity", "ShoppingCart")
                        .WithMany("TaxDetails")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.ClientCascade);
                });
#pragma warning restore 612, 618
        }
    }
}
